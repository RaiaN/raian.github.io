{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-home-runner-work-raian-github-io-raian-github-io-content-blog-c-pointers-index-mdx-6aacd156f86e84ac1841.js","mappings":"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","sources":["webpack://petr_leontev_tech_blog/./content/blog/c++_pointers/index.mdx","webpack://petr_leontev_tech_blog/./src/templates/blogPost.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    em: \"em\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Imagine the following situation in Unreal Engine 4 gameplay code:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"APlayer::OnAttacked()\\n{\\n    USoundSystem* SoundSystem = GameInstance->GetSoundSystem();\\n    if (IsValid(SoundSystem))\\n    {\\n        SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"SoundSystem\"), \" can be invalid but what does that mean? Is it OK situation to just use \", React.createElement(_components.em, null, \"IsValid()\"), \" and do nothing otherwise? This issue is more interesting that it seems.\"), \"\\n\", React.createElement(_components.p, null, \"Good question to start with is if \", React.createElement(_components.strong, null, \"SoundSystem\"), \" is not valid in \", React.createElement(_components.em, null, \"OnAttacked()\"), \" context then maybe we should tell someone about it? To do that one can use multiple methods: return values, delegates calling, writing some error message to log... but wait! \", React.createElement(_components.strong, null, \"SoundSystem\"), \" is not valid!\"), \"\\n\", React.createElement(_components.p, null, \"When a game system is not valid then what do we can to do? Well, let's get an instance of that system because it should be created already, right?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"APlayer::OnAttacked()\\n{\\n    USoundSystem* SoundSystem = nullptr;\\n    if (!IsValid(SoundSystem))\\n    {\\n        SoundSystem = GameInstance->GetSoundSystem();\\n    }\\n\\n    SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"But should we use \", React.createElement(_components.em, null, \"IsValid()\"), \" again just to be sure SoundSystem we've got is valid? It seems like we are going to have a infinite loop here.\"), \"\\n\", React.createElement(_components.p, null, \"Another way to fix this problem is to put SoundSystem initialization into \", React.createElement(_components.em, null, \"APlayer\"), \" method that can guarantee \", React.createElement(_components.em, null, \"SoundSystem\"), \" is initialized:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"\\n// .h\\nclass APlayer : AActor\\n{\\n    ...\\nprivate:\\n    UPROPERTY()\\n    USoundSystem* SoundSystem;\\n};\\n\\n\\n// .cpp\\nAPlayer::APlayer()\\n{\\n    SoundSystem = nullptr;\\n}\\n\\nAPlayer::PostSoundSystemInitialize()\\n{\\n    SoundSystem = GameInstance->GetSoundSystem();\\n}\\n\\nAPlayer::OnAttacked()\\n{\\n    if (IsValid(SoundSystem))\\n    {\\n        SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Notice that we fixed our issue with checking SoundSystem pointer in \", React.createElement(_components.em, null, \"OnAttacked()\"), \" method but still don't know what to do if it is somehow invalid.\"), \"\\n\", React.createElement(_components.p, null, \"Additional question is what if we don't want to store \", React.createElement(_components.em, null, \"SoundSystem\"), \" pointer in \", React.createElement(_components.em, null, \"APlayer\"), \"? Imagine one has \", React.createElement(_components.em, null, \"AEnemy\"), \", \", React.createElement(_components.em, null, \"AEnemyTank\"), \", \", React.createElement(_components.em, null, \"AEnemyTower\"), \" instead of only APlayer and all those classes have to have ability to play sound cue.\"), \"\\n\", React.createElement(_components.p, null, \"I think good solution is to divide all pointer checks into \\\"soft\\\" and \\\"hard\\\" ones. Soft check is when a program can continue execution. Hard one is when we tell a program to stop the execution.\"), \"\\n\", React.createElement(_components.p, null, \"In our case we need \\\"hard\\\" check of \", React.createElement(_components.em, null, \"SoundSystem\"), \" pointer because otherwise that means something is totally wrong with game systems initialization process.\"), \"\\n\", React.createElement(_components.p, null, \"How to do \\\"hard\\\" checks in Unreal Engine 4 C++? There are many ways according to official \", React.createElement(_components.a, {\n    href: \"https://www.google.comhttps://docs.unrealengine.com/en-us/Programming\"\n  }, \"documentation\"), \":\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"* check\\n* checkf\\n* verify\\n* verifyf\\n* checkSlow\\n* checkfSlow\\n* verifySlow\\n\")), \"\\n\", React.createElement(_components.p, null, \"Any of above macroses will halt the execution of the program and that is exactly what we need!\"), \"\\n\", React.createElement(_components.p, null, \"Result:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"APlayer::OnAttacked()\\n{\\n    USoundSystem* SoundSystem = GameInstance->GetSoundSystem();\\n    check(SoundSystem); // or check(IsValid(SoundSystem))\\n\\n    SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"As a conclusion I will also say that default engine macroses \", React.createElement(_components.em, null, \"checkSlow\"), \", \", React.createElement(_components.em, null, \"checkfSlow\"), \", \", React.createElement(_components.em, null, \"verifySlow\"), \" are especially good if you need to check a pointer only in a debug version of your code.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/raian.github.io/raian.github.io/content/blog/c++_pointers/index.mdx\";\nimport React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport BlogLayout from \"../components/blogLayout\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {rhythm, scale} from \"../utils/typography\";\nimport {DiscussionEmbed} from \"disqus-react\";\nimport {createGlobalStyle} from 'styled-components';\nimport 'prismjs/themes/prism-coy.css';\nconst GlobalStyle = createGlobalStyle`\n  ${() => {\n  return null;\n}}  \n  \n  pre code {\n    margin: 0;\n    padding: 0;\n    white-space: pre;\n    border: none;\n    background: transparent;\n  }\n  \n  .highlight pre {\n    background-color: #f8f8f8;\n    border: 1px solid #cccccc;\n    font-size: 13px;\n    line-height: 19px;\n    overflow: auto;\n    padding: 6px 10px;\n    border-radius: 3px;\n  }\n  \n  pre {\n    margin-top: -15px;\n    margin-bottom: 5px;\n    background-color: #f8f8f8;\n    border: 1px solid #cccccc;\n    font-size: 13px;\n    line-height: 19px;\n    overflow: auto;\n    padding: 6px 10px;\n    border-radius: 3px;\n  }\n  \n  pre code, pre tt {\n    background-color: transparent;\n    border: none;\n  }\n\n`;\nfunction BlogPostTemplate({location, data, pageContext, children}) {\n  const siteTitle = data.site.siteMetadata.title;\n  const {previous, next} = pageContext;\n  const post = data.mdx;\n  const disqusConfig = {\n    shortname: data.site.siteMetadata.disqusID,\n    config: {\n      identifier: post.frontmatter.title,\n      siteTitle\n    }\n  };\n  return React.createElement(Layout, null, React.createElement(Link, {\n    to: \"/\"\n  }, React.createElement(\"h3\", {\n    style: {\n      margin: 0,\n      marginBottom: rhythm(2)\n    }\n  }, \"Blog\")), React.createElement(BlogLayout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description,\n    keywords: [`blog`, `unreal engine`]\n  }), React.createElement(\"h4\", {\n    style: {\n      marginBottom: 7,\n      marginTop: 0\n    }\n  }, React.createElement(\"i\", null, post.frontmatter.title)), React.createElement(\"p\", {\n    style: {\n      ...scale(-1 / 5),\n      display: `block`,\n      marginBottom: rhythm(1 / 3),\n      marginTop: 0\n    }\n  }, post.frontmatter.date), React.createElement(GlobalStyle), React.createElement(MDXProvider, null, children), React.createElement(\"hr\", {\n    style: {\n      marginBottom: rhythm(1)\n    }\n  }), React.createElement(\"div\", null, React.createElement(\"ul\", {\n    style: {\n      display: `flex`,\n      flexWrap: `wrap`,\n      justifyContent: `space-between`,\n      listStyle: `none`,\n      padding: 0,\n      marginLeft: 0\n    }\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: previous.frontmatter.slug,\n    rel: \"prev\"\n  }, \"← \", React.createElement(\"i\", null, previous.frontmatter.title))), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: next.frontmatter.slug,\n    rel: \"next\"\n  }, React.createElement(\"i\", null, next.frontmatter.title), \" →\")))), React.createElement(DiscussionEmbed, disqusConfig)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const blogPostQuery = graphql`\n  query BlogPostBySlug($id: String) {\n    site {\n      siteMetadata {\n        author,\n        title,\n        disqusID\n      }\n    }\n    mdx(id: {eq: $id}) {\n      id\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      internal {\n        contentFilePath\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","strong","em","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","GlobalStyle","createGlobalStyle","_templateObject","_taggedTemplateLiteralLoose","BlogPostTemplate","_ref","location","data","pageContext","children","siteTitle","site","siteMetadata","title","previous","next","post","mdx","disqusConfig","shortname","disqusID","config","identifier","frontmatter","Layout","Link","to","style","margin","marginBottom","rhythm","BlogLayout","Seo","description","keywords","marginTop","scale","display","date","MDXProvider","flexWrap","justifyContent","listStyle","padding","marginLeft","slug","rel","DiscussionEmbed","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}